/* tslint:disable */
/* eslint-disable */
/**
 * RestApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    UserRole,
    UserRoleFromJSON,
    UserRoleToJSON,
} from '../models';

export interface ApiRoleAddToRolePostRequest {
    userRole?: UserRole;
}

export interface ApiRoleCreateRolePostRequest {
    userRole?: UserRole;
}

export interface ApiRoleDeleteRolePostRequest {
    userRole?: UserRole;
}

export interface ApiRoleRemoveFromRolePostRequest {
    userRole?: UserRole;
}

/**
 * 
 */
export class RoleApi extends runtime.BaseAPI {

    /**
     */
    async apiRoleAddToRolePostRaw(requestParameters: ApiRoleAddToRolePostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Role/AddToRole`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserRoleToJSON(requestParameters.userRole),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiRoleAddToRolePost(requestParameters: ApiRoleAddToRolePostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiRoleAddToRolePostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiRoleCreateRolePostRaw(requestParameters: ApiRoleCreateRolePostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Role/CreateRole`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserRoleToJSON(requestParameters.userRole),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiRoleCreateRolePost(requestParameters: ApiRoleCreateRolePostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiRoleCreateRolePostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiRoleDeleteRolePostRaw(requestParameters: ApiRoleDeleteRolePostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Role/DeleteRole`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserRoleToJSON(requestParameters.userRole),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiRoleDeleteRolePost(requestParameters: ApiRoleDeleteRolePostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiRoleDeleteRolePostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiRoleRemoveFromRolePostRaw(requestParameters: ApiRoleRemoveFromRolePostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Role/RemoveFromRole`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserRoleToJSON(requestParameters.userRole),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiRoleRemoveFromRolePost(requestParameters: ApiRoleRemoveFromRolePostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiRoleRemoveFromRolePostRaw(requestParameters, initOverrides);
    }

}
