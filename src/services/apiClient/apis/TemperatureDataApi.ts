/* tslint:disable */
/* eslint-disable */
/**
 * RestApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Filters,
    FiltersFromJSON,
    FiltersToJSON,
    TemperatureData,
    TemperatureDataFromJSON,
    TemperatureDataToJSON,
} from '../models';

export interface ApiTemperatureDataGetRequest {
    aFrom?: string;
    aTo?: string;
}

export interface ApiTemperatureDataPostTestePostRequest {
    filters?: Filters;
}

/**
 * 
 */
export class TemperatureDataApi extends runtime.BaseAPI {

    /**
     */
    async apiTemperatureDataGetRaw(requestParameters: ApiTemperatureDataGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TemperatureData>>> {
        const queryParameters: any = {};

        if (requestParameters.aFrom !== undefined) {
            queryParameters['aFrom'] = requestParameters.aFrom;
        }

        if (requestParameters.aTo !== undefined) {
            queryParameters['aTo'] = requestParameters.aTo;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TemperatureData`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TemperatureDataFromJSON));
    }

    /**
     */
    async apiTemperatureDataGet(requestParameters: ApiTemperatureDataGetRequest, initOverrides?: RequestInit): Promise<Array<TemperatureData>> {
        const response = await this.apiTemperatureDataGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTemperatureDataPostTestePostRaw(requestParameters: ApiTemperatureDataPostTestePostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TemperatureData>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TemperatureData/PostTeste`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FiltersToJSON(requestParameters.filters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TemperatureDataFromJSON));
    }

    /**
     */
    async apiTemperatureDataPostTestePost(requestParameters: ApiTemperatureDataPostTestePostRequest, initOverrides?: RequestInit): Promise<Array<TemperatureData>> {
        const response = await this.apiTemperatureDataPostTestePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
