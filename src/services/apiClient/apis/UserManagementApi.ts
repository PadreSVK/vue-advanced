/* tslint:disable */
/* eslint-disable */
/**
 * RestApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface ApiUserManagementGetUserByIdGetRequest {
    aId?: string;
}

/**
 * 
 */
export class UserManagementApi extends runtime.BaseAPI {

    /**
     */
    async apiUserManagementChangePasswordPostRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/UserManagement/ChangePassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUserManagementChangePasswordPost(initOverrides?: RequestInit): Promise<void> {
        await this.apiUserManagementChangePasswordPostRaw(initOverrides);
    }

    /**
     */
    async apiUserManagementGetUserByIdGetRaw(requestParameters: ApiUserManagementGetUserByIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.aId !== undefined) {
            queryParameters['aId'] = requestParameters.aId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/UserManagement/GetUserById`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUserManagementGetUserByIdGet(requestParameters: ApiUserManagementGetUserByIdGetRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiUserManagementGetUserByIdGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiUserManagementGetUserListGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/UserManagement/GetUserList`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUserManagementGetUserListGet(initOverrides?: RequestInit): Promise<void> {
        await this.apiUserManagementGetUserListGetRaw(initOverrides);
    }

}
