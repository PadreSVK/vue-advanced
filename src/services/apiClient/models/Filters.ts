/* tslint:disable */
/* eslint-disable */
/**
 * RestApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Filters
 */
export interface Filters {
    /**
     * 
     * @type {Date}
     * @memberof Filters
     */
    from?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Filters
     */
    to?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof Filters
     */
    useItemCount?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Filters
     */
    useMinLimit?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Filters
     */
    useMaxLimit?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Filters
     */
    useName?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Filters
     */
    useSorting?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Filters
     */
    itemCount?: number;
    /**
     * 
     * @type {number}
     * @memberof Filters
     */
    mimLimit?: number;
    /**
     * 
     * @type {number}
     * @memberof Filters
     */
    maxLimit?: number;
    /**
     * 
     * @type {string}
     * @memberof Filters
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Filters
     */
    sorting?: string | null;
}

export function FiltersFromJSON(json: any): Filters {
    return FiltersFromJSONTyped(json, false);
}

export function FiltersFromJSONTyped(json: any, ignoreDiscriminator: boolean): Filters {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'from': !exists(json, 'from') ? undefined : (new Date(json['from'])),
        'to': !exists(json, 'to') ? undefined : (new Date(json['to'])),
        'useItemCount': !exists(json, 'useItemCount') ? undefined : json['useItemCount'],
        'useMinLimit': !exists(json, 'useMinLimit') ? undefined : json['useMinLimit'],
        'useMaxLimit': !exists(json, 'useMaxLimit') ? undefined : json['useMaxLimit'],
        'useName': !exists(json, 'useName') ? undefined : json['useName'],
        'useSorting': !exists(json, 'useSorting') ? undefined : json['useSorting'],
        'itemCount': !exists(json, 'itemCount') ? undefined : json['itemCount'],
        'mimLimit': !exists(json, 'mimLimit') ? undefined : json['mimLimit'],
        'maxLimit': !exists(json, 'maxLimit') ? undefined : json['maxLimit'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'sorting': !exists(json, 'sorting') ? undefined : json['sorting'],
    };
}

export function FiltersToJSON(value?: Filters | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'from': value.from === undefined ? undefined : (value.from.toISOString()),
        'to': value.to === undefined ? undefined : (value.to.toISOString()),
        'useItemCount': value.useItemCount,
        'useMinLimit': value.useMinLimit,
        'useMaxLimit': value.useMaxLimit,
        'useName': value.useName,
        'useSorting': value.useSorting,
        'itemCount': value.itemCount,
        'mimLimit': value.mimLimit,
        'maxLimit': value.maxLimit,
        'name': value.name,
        'sorting': value.sorting,
    };
}

